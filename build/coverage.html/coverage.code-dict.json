{"/home/travis/build/npmtest/node-npmtest-react-native-svg/test.js":"/* istanbul instrument in package npmtest_react_native_svg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/lib.npmtest_react_native_svg.js":"/* istanbul instrument in package npmtest_react_native_svg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_svg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_svg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-svg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_svg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_svg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_svg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_svg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_svg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_svg.__dirname + '/lib.npmtest_react_native_svg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/index.js":"import Rect from './elements/Rect';\nimport Circle from './elements/Circle';\nimport Ellipse from './elements/Ellipse';\nimport Polygon from './elements/Polygon';\nimport Polyline from './elements/Polyline';\nimport Line from './elements/Line';\nimport Svg from './elements/Svg';\nimport Path from './elements/Path';\nimport G from './elements/G';\nimport Text from './elements/Text';\nimport TSpan from './elements/TSpan';\nimport TextPath from './elements/TextPath';\nimport Use from './elements/Use';\nimport Image from './elements/Image';\nimport Symbol  from './elements/Symbol';\nimport Defs from './elements/Defs';\nimport LinearGradient from './elements/LinearGradient';\nimport RadialGradient from './elements/RadialGradient';\nimport Stop from './elements/Stop';\nimport ClipPath from './elements/ClipPath';\n\nexport {\n    Svg,\n    Circle,\n    Ellipse,\n    G,\n    Text,\n    TSpan,\n    TextPath,\n    Path,\n    Polygon,\n    Polyline,\n    Line,\n    Rect,\n    Use,\n    Image,\n    Symbol,\n    Defs,\n    LinearGradient,\n    RadialGradient,\n    Stop,\n    ClipPath\n};\n\nexport default Svg;\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Circle.js":"import React from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport Shape from './Shape';\nimport {CircleAttributes} from '../lib/attributes';\nimport {pathProps, numberProp} from '../lib/props';\nimport extractProps from '../lib/extract/extractProps';\n\nexport default class extends Shape {\n    static displayName = 'Circle';\n\n    static propTypes = {\n        ...pathProps,\n        cx: numberProp.isRequired,\n        cy: numberProp.isRequired,\n        r: numberProp.isRequired\n    };\n\n    static defaultProps = {\n        cx: 0,\n        cy: 0,\n        r: 0\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n        return <RNSVGCircle\n            ref={ele => {this.root = ele;}}\n            {...extractProps(props, this)}\n            cx={props.cx.toString()}\n            cy={props.cy.toString()}\n            r={props.r.toString()}\n        />;\n    }\n}\n\n\n\nconst RNSVGCircle = createReactNativeComponentClass({\n    validAttributes: CircleAttributes,\n    uiViewClassName: 'RNSVGCircle'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/ClipPath.js":"import React, {Component, PropTypes} from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {ClipPathAttributes} from '../lib/attributes';\n\nexport default class extends Component{\n    static displayName = 'ClipPath';\n    static propTypes = {\n        id: PropTypes.string.isRequired\n    };\n\n    render() {\n        return <RNSVGClipPath name={this.props.id}>{this.props.children}</RNSVGClipPath>;\n    }\n}\n\nconst RNSVGClipPath = createReactNativeComponentClass({\n    validAttributes: ClipPathAttributes,\n    uiViewClassName: 'RNSVGClipPath'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Defs.js":"import React, { Component } from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\n\nexport default class extends Component {\n    static displayName = 'Defs';\n\n    render() {\n        return <RNSVGDefs>{this.props.children}</RNSVGDefs>;\n    }\n}\n\nconst RNSVGDefs = createReactNativeComponentClass({\n    validAttributes: {},\n    uiViewClassName: 'RNSVGDefs'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Ellipse.js":"import React from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport Shape from './Shape';\nimport {pathProps, numberProp} from '../lib/props';\nimport {EllipseAttributes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\n\nexport default class extends Shape{\n    static displayName = 'Ellipse';\n\n    static propTypes = {\n        ...pathProps,\n        cx: numberProp.isRequired,\n        cy: numberProp.isRequired,\n        rx: numberProp.isRequired,\n        ry: numberProp.isRequired\n    };\n\n    static defaultProps = {\n        cx: 0,\n        cy: 0,\n        rx: 0,\n        ry: 0\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n\n        return <RNSVGEllipse\n            ref={ele => {this.root = ele;}}\n            {...extractProps(props, this)}\n            cx={props.cx.toString()}\n            cy={props.cy.toString()}\n            rx={props.rx.toString()}\n            ry={props.ry.toString()}\n        />;\n    }\n}\n\nconst RNSVGEllipse = createReactNativeComponentClass({\n    validAttributes: EllipseAttributes,\n    uiViewClassName: 'RNSVGEllipse'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/G.js":"import React from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport Shape from './Shape';\nimport {pathProps} from '../lib/props';\nimport {GroupAttributes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\n\nexport default class extends Shape{\n    static displayName = 'G';\n\n    static propTypes = pathProps;\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let {props} = this;\n\n        return <RNSVGGroup\n            {...extractProps(props, this)}\n            ref={ele => {this.root = ele;}}\n        >\n            {props.children}\n        </RNSVGGroup>;\n    }\n}\n\nconst RNSVGGroup = createReactNativeComponentClass({\n    validAttributes: GroupAttributes,\n    uiViewClassName: 'RNSVGGroup'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Image.js":"import React, {PropTypes} from 'react';\nimport { Image } from 'react-native';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {ImageAttributes} from '../lib/attributes';\nimport {numberProp, touchableProps, responderProps} from '../lib/props';\nimport Shape from './Shape';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport {meetOrSliceTypes, alignEnum} from '../lib/extract/extractViewBox';\nimport extractProps from '../lib/extract/extractProps';\n\nconst spacesRegExp = /\\s+/;\n\nexport default class extends Shape {\n    static displayName = 'Image';\n    static propTypes = {\n        ...responderProps,\n        ...touchableProps,\n        x: numberProp,\n        y: numberProp,\n        width: numberProp.isRequired,\n        height: numberProp.isRequired,\n        href: Image.propTypes.source,\n        preserveAspectRatio: PropTypes.string\n    };\n\n    static defaultProps = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        preserveAspectRatio: 'xMidYMid meet'\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let {props} = this;\n        let modes = props.preserveAspectRatio.trim().split(spacesRegExp);\n        let meetOrSlice = meetOrSliceTypes[modes[1]] || 0;\n        let align = alignEnum[modes[0]] || 'xMidYMid';\n\n        return <RNSVGImage\n            ref={ele => {this.root = ele;}}\n            {...extractProps({...props, x: null, y: null}, this)}\n            x={props.x.toString()}\n            y={props.y.toString()}\n            width={props.width.toString()}\n            height={props.height.toString()}\n            meetOrSlice={meetOrSlice}\n            align={align}\n            src={resolveAssetSource(props.href)}\n        />;\n    }\n}\n\nconst RNSVGImage = createReactNativeComponentClass({\n    validAttributes: ImageAttributes,\n    uiViewClassName: 'RNSVGImage'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/LinearGradient.js":"import React, {PropTypes, Component} from 'react';\nimport {numberProp} from '../lib/props';\nimport extractGradient from '../lib/extract/extractGradient';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {LinearGradientAttributes} from '../lib/attributes';\n\nexport default class extends Component{\n    static displayName = 'LinearGradient';\n    static propTypes = {\n        x1: numberProp.isRequired,\n        x2: numberProp.isRequired,\n        y1: numberProp.isRequired,\n        y2: numberProp.isRequired,\n        id: PropTypes.string.isRequired\n    };\n\n    static defaultProps = {\n        x1: '0%',\n        y1: '0%',\n        x2: '100%',\n        y2: '0%'\n    };\n\n    render() {\n        let {props} = this;\n        return <RNSVGLinearGradient\n            x1={props.x1.toString()}\n            y1={props.y1.toString()}\n            x2={props.x2.toString()}\n            y2={props.y2.toString()}\n            {...extractGradient(this.props)}\n        />;\n\n    }\n}\n\nconst RNSVGLinearGradient = createReactNativeComponentClass({\n    validAttributes: LinearGradientAttributes,\n    uiViewClassName: 'RNSVGLinearGradient'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Line.js":"import React from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {LineAttributes} from '../lib/attributes';\nimport Shape from './Shape';\nimport {pathProps, numberProp} from '../lib/props';\nimport extractProps from '../lib/extract/extractProps';\n\nexport default class extends Shape {\n    static displayName = 'Line';\n\n    static propTypes = {\n        ...pathProps,\n        x1: numberProp.isRequired,\n        x2: numberProp.isRequired,\n        y1: numberProp.isRequired,\n        y2: numberProp.isRequired\n    };\n\n    static defaultProps = {\n        x1: 0,\n        y1: 0,\n        x2: 0,\n        y2: 0\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n        return <RNSVGLine\n            ref={ele => {this.root = ele;}}\n            {...extractProps(props, this)}\n            x1={props.x1.toString()}\n            y1={props.y1.toString()}\n            x2={props.x2.toString()}\n            y2={props.y2.toString()}\n        />;\n    }\n}\n\nconst RNSVGLine = createReactNativeComponentClass({\n    validAttributes: LineAttributes,\n    uiViewClassName: 'RNSVGLine'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Path.js":"import React, {PropTypes} from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {PathAttributes} from '../lib/attributes';\nimport Shape from './Shape';\nimport {pathProps} from '../lib/props';\nimport extractProps from '../lib/extract/extractProps';\n\nexport default class extends Shape {\n    static displayName = 'Path';\n\n    static propTypes = {\n        ...pathProps,\n        d: PropTypes.string.isRequired\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n\n        return (\n            <RNSVGPath\n                ref={ele => {this.root = ele;}}\n                {...extractProps(props, this)}\n                d={props.d}\n            />\n        );\n    }\n}\n\nconst RNSVGPath = createReactNativeComponentClass({\n    validAttributes: PathAttributes,\n    uiViewClassName: 'RNSVGPath'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Pattern.js":"import {Component, PropTypes} from 'react';\nimport {numberProp} from '../lib/props';\n\nexport default class extends Component{\n    static displayName = 'Pattern';\n    static propTypes = {\n        x1: numberProp,\n        x2: numberProp,\n        y1: numberProp,\n        y2: numberProp,\n        patternTransform: PropTypes.string,\n        patternUnits: PropTypes.oneOf(['userSpaceOnUse', 'objectBoundingBox']),\n        patternContentUnits: PropTypes.oneOf(['userSpaceOnUse', 'objectBoundingBox'])\n    };\n\n\n    render() {\n        return null;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Polygon.js":"import React, {Component, PropTypes} from 'react';\nimport Path from './Path';\nimport {pathProps} from '../lib/props';\nimport extractPolyPoints from '../lib/extract/extractPolyPoints';\n\nexport default class extends Component{\n    static displayName = 'Polygon';\n    static propTypes = {\n        ...pathProps,\n        points: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired\n    };\n\n    static defaultProps = {\n        points: ''\n    };\n\n    setNativeProps = (...args) => {\n        this.root.getNativeElement().setNativeProps(...args);\n    };\n\n    render() {\n        let points = this.props.points;\n        if (Array.isArray(points)) {\n            points = points.join(',');\n        }\n\n        return <Path\n            ref={ele => {this.root = ele;}}\n            {...this.props}\n            d={`M${extractPolyPoints(points)}z`}\n        />;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Polyline.js":"import React, {Component, PropTypes} from 'react';\nimport Path from './Path';\nimport {pathProps} from '../lib/props';\nimport extractPolyPoints from '../lib/extract/extractPolyPoints';\n\nexport default class extends Component{\n    static displayName = 'Polyline';\n    static propTypes = {\n        ...pathProps,\n        points: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired\n    };\n\n    static defaultProps = {\n        points: ''\n    };\n\n    setNativeProps = (...args) => {\n        this.root.getNativeElement().setNativeProps(...args);\n    };\n\n    render() {\n        let points = this.props.points;\n        if (Array.isArray(points)) {\n            points = points.join(',');\n        }\n\n        return <Path\n            ref={ele => {this.root = ele;}}\n            {...this.props}\n            d={`M${extractPolyPoints(points)}`}\n        />;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/RadialGradient.js":"import React, {PropTypes, Component} from 'react';\nimport {numberProp} from '../lib/props';\nimport extractGradient from '../lib/extract/extractGradient';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {RadialGradientAttributes} from '../lib/attributes';\n\nexport default class extends Component{\n    static displayName = 'RadialGradient';\n    static propTypes = {\n        fx: numberProp.isRequired,\n        fy: numberProp.isRequired,\n        rx: numberProp,\n        ry: numberProp,\n        cx: numberProp.isRequired,\n        cy: numberProp.isRequired,\n        r: numberProp,\n        id: PropTypes.string.isRequired\n    };\n\n    static defaultProps = {\n        fx: '50%',\n        fy: '50%',\n        cx: '50%',\n        cy: '50%',\n        r: '50%'\n    };\n\n    render() {\n        let {props} = this;\n        return <RNSVGRadialGradient\n            fx={props.fx.toString()}\n            fy={props.fy.toString()}\n            rx={(props.rx || props.r).toString()}\n            ry={(props.ry || props.r).toString()}\n            cx={props.cx.toString()}\n            cy={props.cy.toString()}\n            {...extractGradient(this.props)}\n        />;\n\n    }\n}\n\nconst RNSVGRadialGradient = createReactNativeComponentClass({\n    validAttributes: RadialGradientAttributes,\n    uiViewClassName: 'RNSVGRadialGradient'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Rect.js":"import React from 'react';\nimport './Path'; // must import Path first, don`t know why. without this will throw an `Super expression must either be null or a function, not undefined`\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {pathProps, numberProp} from '../lib/props';\nimport {RectAttributes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\nimport Shape from './Shape';\n\nexport default class extends Shape {\n    static displayName = 'Rect';\n\n    static propTypes = {\n        ...pathProps,\n        x: numberProp.isRequired,\n        y: numberProp.isRequired,\n        width: numberProp.isRequired,\n        height: numberProp.isRequired,\n        rx: numberProp,\n        ry: numberProp\n    };\n\n    static defaultProps = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        rx: 0,\n        ry: 0\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n\n        return <RNSVGRect\n            ref={ele => {this.root = ele;}}\n            {...extractProps({\n                ...props,\n                x: null,\n                y: null\n            }, this)}\n            x={props.x.toString()}\n            y={props.y.toString()}\n            width={props.width.toString()}\n            height={props.height.toString()}\n            rx={props.rx.toString()}\n            ry={props.ry.toString()}\n        />;\n    }\n}\n\nconst RNSVGRect = createReactNativeComponentClass({\n    validAttributes: RectAttributes,\n    uiViewClassName: 'RNSVGRect'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Shape.js":"import {Component} from 'react';\nimport SvgTouchableMixin from '../lib/SvgTouchableMixin';\nimport _ from 'lodash';\n\nclass Shape extends Component {\n    constructor() {\n        super(...arguments);\n        _.forEach(SvgTouchableMixin, (method, key) => {\n            this[key] = method.bind(this);\n        });\n        this.state = this.touchableGetInitialState();\n    }\n}\n\nexport default Shape;\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Stop.js":"import {Component, PropTypes} from 'react';\nimport {numberProp} from '../lib/props';\n\nexport default class extends Component{\n    static displayName = 'Stop';\n    static propTypes = {\n        stopColor: PropTypes.string,\n        stopOpacity: numberProp\n    };\n\n    static defaultProps = {\n        stopColor: '#000',\n        stopOpacity: 1\n    };\n\n    render() {\n        return null;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Svg.js":"import React, {\n    Component,\n    PropTypes\n} from 'react';\nimport {\n    View,\n    requireNativeComponent,\n    StyleSheet,\n    findNodeHandle,\n    NativeModules\n} from 'react-native';\nimport extractViewBox from '../lib/extract/extractViewBox';\nimport {ViewBoxAttributes} from '../lib/attributes';\n\nconst RNSVGSvgViewManager = NativeModules.RNSVGSvgViewManager;\n\n// Svg - Root node of all Svg elements\nlet id = 0;\n\nconst styles = StyleSheet.create({\n    svg: {\n        backgroundColor: 'transparent'\n    }\n});\n\nclass Svg extends Component{\n    static displayName = 'Svg';\n    static propTypes = {\n        ...View.propTypes,\n        opacity: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        // more detail https://svgwg.org/svg2-draft/coords.html#ViewBoxAttribute\n        viewBox: PropTypes.string,\n        preserveAspectRatio: PropTypes.string\n    };\n\n    static defaultProps = {\n        preserveAspectRatio: 'xMidYMid meet'\n    };\n\n    constructor() {\n        super(...arguments);\n        id++;\n        this.id = id;\n        this.onDataURLCallbacks = [];\n    }\n    measureInWindow = (...args) => {\n        this.root.measureInWindow(...args);\n    };\n\n    measure = (...args) => {\n        this.root.measure(...args);\n    };\n\n    measureLayout = (...args) => {\n        this.root.measureLayout(...args);\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    toDataURL = (callback: Function) => {\n        callback && RNSVGSvgViewManager.toDataURL(findNodeHandle(this.root), callback);\n    };\n\n    render() {\n        const {opacity, width, height, viewBox, preserveAspectRatio, style, ...props} = this.props;\n        let dimensions;\n\n        if (width && height) {\n            dimensions = {\n                width: +width,\n                height: +height,\n                flex: 0\n            };\n        }\n\n        return <NativeSvgView\n            {...props}\n            {...extractViewBox({ viewBox, preserveAspectRatio })}\n            ref={ele => {this.root = ele;}}\n            style={[\n                styles.svg,\n                style,\n                !isNaN(+opacity) && {\n                    opacity: +opacity\n                },\n                dimensions\n            ]}\n        />;\n    }\n}\n\nconst NativeSvgView = requireNativeComponent('RNSVGSvgView', null, {\n    nativeOnly: {\n        ...ViewBoxAttributes\n    }\n});\n\nexport default Svg;\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Symbol.js":"import React, {Component, PropTypes} from 'react';\nimport extractViewBox from '../lib/extract/extractViewBox';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {SymbolAttributes} from '../lib/attributes';\n\nexport default class extends Component{\n    static displayName = 'Symbol';\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        viewBox: PropTypes.string,\n        preserveAspectRatio: PropTypes.string\n    };\n    render() {\n        let {props} = this;\n\n        return <RNSVGSymbol\n            name={props.id}\n            {...extractViewBox(props)}\n        >\n            {props.children}\n        </RNSVGSymbol>;\n    }\n}\n\nconst RNSVGSymbol = createReactNativeComponentClass({\n    validAttributes: SymbolAttributes,\n    uiViewClassName: 'RNSVGSymbol'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Text.js":"import React, {PropTypes} from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport extractText from '../lib/extract/extractText';\nimport {numberProp, pathProps, fontProps} from '../lib/props';\nimport {TextAttributes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\nimport Shape from './Shape';\n\nexport default class extends Shape {\n    static displayName = 'Text';\n\n    static propTypes = {\n        ...pathProps,\n        ...fontProps,\n        dx: numberProp,\n        dy: numberProp,\n        textAnchor: PropTypes.oneOf(['start', 'middle', 'end'])\n    };\n\n    static childContextTypes = {\n        isInAParentText: React.PropTypes.bool\n    };\n\n    getChildContext() {\n        return {\n            isInAParentText: true\n        };\n    };\n\n    getContextTypes() {\n        return {\n            isInAParentText: React.PropTypes.bool\n        };\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        const props = this.props;\n\n        return <RNSVGText\n            ref={ele => {this.root = ele;}}\n            {...extractProps({\n                ...props,\n                x: null,\n                y: null\n            }, this)}\n            {...extractText(props, true)}\n        />;\n    }\n}\n\nconst RNSVGText = createReactNativeComponentClass({\n    validAttributes: TextAttributes,\n    uiViewClassName: 'RNSVGText'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/TextPath.js":"import React, {PropTypes} from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {TextPathAttributes} from '../lib/attributes';\nimport extractText from '../lib/extract/extractText';\nimport Shape from './Shape';\nimport {pathProps, fontProps, numberProp} from '../lib/props';\nimport extractProps from '../lib/extract/extractProps';\nimport TSpan from './TSpan';\n\nconst idExpReg = /^#(.+)$/;\n\nexport default class extends Shape {\n    static displayName = 'Span';\n\n    static propTypes = {\n        ...pathProps,\n        ...fontProps,\n        href: PropTypes.string.isRequired,\n        startOffset: numberProp\n    };\n\n    render() {\n        let {children, href, startOffset, ...props} = this.props;\n        if (href) {\n            let matched = href.match(idExpReg);\n\n            if (matched) {\n                href = matched[1];\n\n                return <RNSVGTextPath\n                    href={href}\n                    {...extractProps({\n                        ...props,\n                        x: null,\n                        y: null\n                    }, this)}\n                    {...extractText({\n                        children,\n                        startOffset\n                    }, true)}\n                />;\n            }\n        }\n\n        console.warn('Invalid `href` prop for `TextPath` element, expected a href like `\"#id\"`, but got: \"' + props.href + '\"');\n        return <TSpan>{children}</TSpan>\n    }\n\n}\n\nconst RNSVGTextPath = createReactNativeComponentClass({\n    validAttributes: TextPathAttributes,\n    uiViewClassName: 'RNSVGTextPath'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/TSpan.js":"import React, { PropTypes } from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport extractText from '../lib/extract/extractText';\nimport {numberProp, pathProps, fontProps} from '../lib/props';\nimport {TSpanAttibutes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\nimport Shape from './Shape';\n\n// TSpan elements are shadow components\nexport default class extends Shape {\n    static displayName = 'TSpan';\n\n    static propTypes = {\n        ...pathProps,\n        ...fontProps,\n        dx: numberProp,\n        dy: numberProp,\n        textAnchor: PropTypes.oneOf(['start', 'middle', 'end'])\n    };\n\n    static childContextTypes = {\n        isInAParentText: React.PropTypes.bool\n    };\n\n    getChildContext() {\n        return {\n            isInAParentText: true\n        };\n    };\n\n    getContextTypes() {\n        return {\n            isInAParentText: React.PropTypes.bool\n        };\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n        return <RNSVGTSpan\n            ref={ele => {this.root = ele;}}\n            {...extractProps({\n                ...props,\n                x: null,\n                y: null\n            }, this)}\n            {...extractText(props)}\n        />;\n    }\n}\n\nconst RNSVGTSpan = createReactNativeComponentClass({\n    validAttributes: TSpanAttibutes,\n    uiViewClassName: 'RNSVGTSpan'\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/elements/Use.js":"import React, {PropTypes} from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport extractProps from '../lib/extract/extractProps';\nimport {pathProps, numberProp} from '../lib/props';\nimport {UseAttributes} from '../lib/attributes';\nimport Shape from './Shape';\n\nconst idExpReg = /^#(.+)$/;\nexport default class extends Shape {\n    static displayName = 'Use';\n\n    static propTypes = {\n        href: PropTypes.string.isRequired,\n        width: numberProp, // Just for reusing `Symbol`\n        height: numberProp, //  Just for reusing `Symbol`\n        ...pathProps\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        const {props} = this;\n        // match \"url(#pattern)\"\n        const matched = props.href.match(idExpReg);\n        let href;\n\n        if (matched) {\n            href = matched[1];\n        }\n\n        if (!href) {\n            console.warn('Invalid `href` prop for `Use` element, expected a href like `\"#id\"`, but got: \"' + props.href + '\"');\n        }\n\n        return <RNSVGUse\n            ref={ele => {this.root = ele;}}\n            {...extractProps(props, this)}\n            href={href}\n            width={props.width}\n            height={props.height}\n        >{props.children}</RNSVGUse>;\n    }\n}\n\nconst RNSVGUse = createReactNativeComponentClass({\n    validAttributes: UseAttributes,\n    uiViewClassName: 'RNSVGUse'\n});\n\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/attributes.js":"\nfunction arrayDiffer(a, b) {\n    /*eslint eqeqeq:0*/\n    if (a == null || b == null) {\n        return true;\n    }\n    if (a.length !== b.length) {\n        return true;\n    }\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction fontDiffer(a, b) {\n    if (a === b) {\n        return false;\n    }\n\n    return a.fontSize !== b.fontSize ||\n        a.fontFamily !== b.fontFamily ||\n        a.fontStyle !== b.fontStyle ||\n        a.fontWeight !== b.fontWeight;\n}\n\nconst ViewBoxAttributes = {\n    minX: true,\n    minY: true,\n    vbWidth: true,\n    vbHeight: true,\n    align: true,\n    meetOrSlice: true\n};\n\nconst NodeAttributes = {\n    name: true,\n    matrix: {\n        diff: arrayDiffer\n    },\n    opacity: true,\n    clipRule: true,\n    clipPath: true,\n    propList: {\n        diff: arrayDiffer\n    },\n    responsible: true\n};\n\nconst FillAndStrokeAttributes = {\n    fill: {\n        diff: arrayDiffer\n    },\n    fillOpacity: true,\n    fillRule: true,\n    stroke: {\n        diff: arrayDiffer\n    },\n    strokeOpacity: true,\n    strokeWidth: true,\n    strokeLinecap: true,\n    strokeLinejoin: true,\n    strokeDasharray: {\n        diff: arrayDiffer\n    },\n    strokeDashoffset: true,\n    strokeMiterlimit: true\n};\n\nconst RenderableAttributes = {\n    ...NodeAttributes,\n    ...FillAndStrokeAttributes\n};\n\nconst GroupAttributes = RenderableAttributes;\n\nconst UseAttributes = {\n    href: true,\n    width: true,\n    height: true,\n    ...RenderableAttributes\n};\n\nconst SymbolAttributes = {\n    name: true,\n    ...ViewBoxAttributes\n};\n\nconst PathAttributes = {\n    d: true,\n    ...RenderableAttributes\n};\n\nconst TextAttributes = {\n    font: {\n        diff: fontDiffer\n    },\n    textAnchor: true,\n    deltaX: arrayDiffer,\n    deltaY: arrayDiffer,\n    positionX: true,\n    positionY: true,\n    ...RenderableAttributes\n};\n\nconst TextPathAttributes = {\n    href: true,\n    startOffset: true,\n    ...RenderableAttributes\n};\n\nconst TSpanAttibutes = {\n    content: true,\n    ...TextAttributes\n};\n\nconst ClipPathAttributes = {\n    name: true\n};\n\nconst GradientAttributes = {\n    gradient: {\n        diff: arrayDiffer\n    },\n    gradientUnits: true,\n    gradientTransform: {\n        diff: arrayDiffer\n    },\n    ...ClipPathAttributes\n};\n\nconst LinearGradientAttributes = {\n    x1: true,\n    y1: true,\n    x2: true,\n    y2: true,\n    ...GradientAttributes\n};\n\nconst RadialGradientAttributes = {\n    fx: true,\n    fy: true,\n    rx: true,\n    ry: true,\n    cx: true,\n    cy: true,\n    r: true,\n    ...GradientAttributes\n};\n\n\nconst CircleAttributes = {\n    cx: true,\n    cy: true,\n    r: true,\n    ...RenderableAttributes\n};\n\nconst EllipseAttributes = {\n    cx: true,\n    cy: true,\n    rx: true,\n    ry: true,\n    ...RenderableAttributes\n};\n\nconst ImageAttributes = {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    src: true,\n    align: true,\n    meetOrSlice: true,\n    ...RenderableAttributes\n};\n\nconst LineAttributes = {\n    x1: true,\n    y1: true,\n    x2: true,\n    y2: true,\n    ...RenderableAttributes\n};\n\nconst RectAttributes = {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n    rx: true,\n    ry: true,\n    ...RenderableAttributes\n};\n\nexport {\n    PathAttributes,\n    TextAttributes,\n    TSpanAttibutes,\n    TextPathAttributes,\n    GroupAttributes,\n    ClipPathAttributes,\n    CircleAttributes,\n    EllipseAttributes,\n    ImageAttributes,\n    LineAttributes,\n    RectAttributes,\n    UseAttributes,\n    SymbolAttributes,\n    LinearGradientAttributes,\n    RadialGradientAttributes,\n    ViewBoxAttributes\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/Matrix2D.js":"/**\n * based on\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n */\nconst DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n *\n * @class Matrix2D\n * @param {Number} [a=1] Specifies the a property for the new matrix.\n * @param {Number} [b=0] Specifies the b property for the new matrix.\n * @param {Number} [c=0] Specifies the c property for the new matrix.\n * @param {Number} [d=1] Specifies the d property for the new matrix.\n * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n * @constructor\n **/\nexport default class Matrix2D {\n    constructor(a, b, c, d, tx, ty) {\n        this.setTransform(a, b, c, d, tx, ty);\n\n        // public properties:\n        // assigned in the setValues method.\n        /**\n         * Position (0, 0) in a 3x3 affine transformation matrix.\n         * @property a\n         * @type Number\n         **/\n\n        /**\n         * Position (0, 1) in a 3x3 affine transformation matrix.\n         * @property b\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 0) in a 3x3 affine transformation matrix.\n         * @property c\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 1) in a 3x3 affine transformation matrix.\n         * @property d\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 0) in a 3x3 affine transformation matrix.\n         * @property tx\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 1) in a 3x3 affine transformation matrix.\n         * @property ty\n         * @type Number\n         **/\n    }\n\n    /**\n     * Set current matrix to new absolute matrix.\n     * @method setTransform\n     * @param {Number} [a=1] Specifies the a property for the new matrix.\n     * @param {Number} [b=0] Specifies the b property for the new matrix.\n     * @param {Number} [c=0] Specifies the c property for the new matrix.\n     * @param {Number} [d=1] Specifies the d property for the new matrix.\n     * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n     * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n     * @return {Matrix2D} This instance. Useful for chaining method calls.\n     */\n    setTransform = function(a, b, c, d, tx, ty) {\n        /*eslint eqeqeq:0*/\n        this.a = a == null ? 1 : a;\n        this.b = b || 0;\n        this.c = c || 0;\n        this.d = b == null ? 1 : d;\n        this.tx = tx || 0;\n        this.ty = ty || 0;\n        return this;\n    };\n\n    /**\n     * Reset current matrix to an identity matrix.\n     * @method reset\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    reset = function() {\n        this.a = this.d = 1;\n        this.b = this.c = this.tx = this.ty = 0;\n        return this;\n    };\n\n    /**\n     * Returns an array with current matrix values.\n     * @method toArray\n     * @return {Array} an array with current matrix values.\n     **/\n    toArray = function() {\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n    };\n\n    /**\n     * Copies all properties from the specified matrix to this matrix.\n     * @method copy\n     * @param {Matrix2D} matrix The matrix to copy properties from.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     */\n    copy = function(matrix) {\n        return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n    };\n\n    /**\n     * Clones current instance and returning a new matrix.\n     * @method clone\n     * @return {Matrix2D} a clone of the Matrix2D instance.\n     **/\n    clone = function() {\n        return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    };\n\n    /**\n     * Prepends the specified matrix properties to this matrix.\n     * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n     * All parameters are required.\n     * @method prepend\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prepend = function(a, b, c, d, tx, ty) {\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n\n        this.a  = a * a1 + c * this.b;\n        this.b  = b * a1 + d * this.b;\n        this.c  = a * c1 + c * this.d;\n        this.d  = b * c1 + d * this.d;\n        this.tx = a * tx1 + c * this.ty + tx;\n        this.ty = b * tx1 + d * this.ty + ty;\n        return this;\n    };\n\n    /**\n     * Appends the specified matrix properties to this matrix. All parameters are required.\n     * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n     * @method append\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    append = function(a, b, c, d, tx, ty) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n            this.a  = a1 * a + c1 * b;\n            this.b  = b1 * a + d1 * b;\n            this.c  = a1 * c + c1 * d;\n            this.d  = b1 * c + d1 * d;\n        }\n        this.tx = a1 * tx + c1 * ty + this.tx;\n        this.ty = b1 * tx + d1 * ty + this.ty;\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n     * For example, you can use this to generate a matrix representing the transformations of a display object:\n     *\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n     * @method appendTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n        if (rotation % 360) {\n            var r = rotation * DEG_TO_RAD;\n            var cos = Math.cos(r);\n            var sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single append operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n            this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n        } else {\n            this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n        }\n\n        if (regX || regY) {\n            // append the registration offset:\n            this.tx -= regX * this.a + regY * this.c;\n            this.ty -= regX * this.b + regY * this.d;\n        }\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n     * For example, you could calculate the combined transformation for a child object using:\n     *\n     * \tvar o = myDisplayObject;\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tdo  {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t * \t} while (o = o.parent);\n     *\n     * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n     * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n     * @method prependTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n        if (rotation % 360) {\n            var r = rotation * DEG_TO_RAD;\n            var cos = Math.cos(r);\n            var sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (regX || regY) {\n            // prepend the registration offset:\n            this.tx -= regX; this.ty -= regY;\n        }\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single prepend operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n            this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n        } else {\n            this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n        }\n        return this;\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/PATTERN_UNITS.js":"\nexport default {\n    objectBoundingBox: 0,\n    userSpaceOnUse: 1\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/percentToFloat.js":"let percentReg = /^(-?\\d+(?:\\.\\d+)?)(%?)$/;\nexport default function (percent) {\n    let matched = percent.match(percentReg);\n    if (!matched) {\n        console.warn(`\\`${percent}\\` is not a valid number or percentage string.`);\n        return 0;\n    }\n\n    return matched[2] ? matched[1] / 100 : +matched[1];\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/props.js":"import {PropTypes} from 'react';\nimport {PanResponder} from 'react-native';\n\nconst numberProp = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n\nconst touchableProps = {\n    disabled: PropTypes.bool,\n    onPress: PropTypes.func,\n    onPressIn: PropTypes.func,\n    onPressOut: PropTypes.func,\n    onLongPress: PropTypes.func,\n    delayPressIn: PropTypes.number,\n    delayPressOut: PropTypes.number,\n    delayLongPress: PropTypes.number\n};\n\nconst responderProps =  [\n    ...Object.keys(PanResponder.create({}).panHandlers),\n    'pointerEvents'\n].reduce((props, name) => {\n    props[name] = PropTypes.func;\n    return props;\n}, {});\n\nconst fillProps = {\n    fill: PropTypes.string,\n    fillOpacity: numberProp,\n    fillRule: PropTypes.oneOf(['evenodd', 'nonzero'])\n};\n\nconst clipProps = {\n    clipRule: PropTypes.oneOf(['evenodd', 'nonzero']),\n    clipPath: PropTypes.string\n};\n\nconst definationProps = {\n    name: PropTypes.string\n};\n\nconst strokeProps = {\n    stroke: PropTypes.string,\n    strokeWidth: numberProp,\n    strokeOpacity: numberProp,\n    strokeDasharray: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.string]),\n    strokeDashoffset: numberProp,\n    strokeLinecap: PropTypes.oneOf(['butt', 'square', 'round']),\n    strokeLinejoin: PropTypes.oneOf(['miter', 'bevel', 'round']),\n    strokeMiterlimit: numberProp\n};\n\nconst fontProps = {\n    fontFamily: PropTypes.string,\n    fontSize: numberProp,\n    fontWeight: numberProp,\n    fontStyle: PropTypes.string,\n    font: PropTypes.object\n};\n\nconst transformProps = {\n    scale: numberProp,\n    scaleX: numberProp,\n    scaleY: numberProp,\n    rotate: numberProp,\n    rotation: numberProp,\n    translate: numberProp,\n    translateX: numberProp,\n    translateY: numberProp,\n    x: numberProp,\n    y: numberProp,\n    origin: numberProp,\n    originX: numberProp,\n    originY: numberProp,\n    skew: numberProp,\n    skewX: numberProp,\n    skewY: numberProp,\n    transform: PropTypes.object\n};\n\nconst pathProps = {\n    ...fillProps,\n    ...strokeProps,\n    ...clipProps,\n    ...transformProps,\n    ...responderProps,\n    ...touchableProps,\n    ...definationProps\n};\n\nexport {\n    numberProp,\n    fillProps,\n    strokeProps,\n    fontProps,\n    clipProps,\n    pathProps,\n    responderProps,\n    touchableProps\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/SvgTouchableMixin.js":"import Touchable from 'react-native/Libraries/Components/Touchable/Touchable';\nconst PRESS_RETENTION_OFFSET = {top: 20, left: 20, right: 20, bottom: 30};\n\nexport default {\n    ...Touchable.Mixin,\n\n    touchableHandleStartShouldSetResponder: function (e) {\n\n        if (this.props.onStartShouldSetResponder) {\n            return this.props.onStartShouldSetResponder(e);\n        } else {\n            return Touchable.Mixin.touchableHandleStartShouldSetResponder.call(this, e);\n        }\n    },\n\n    touchableHandleResponderTerminationRequest: function (e) {\n        if (this.props.onResponderTerminationRequest) {\n            return this.props.onResponderTerminationRequest(e);\n        } else {\n            return Touchable.Mixin.touchableHandleResponderTerminationRequest.call(this, e);\n        }\n    },\n\n    touchableHandleResponderGrant: function (e) {\n        if (this.props.onResponderGrant) {\n            return this.props.onResponderGrant(e);\n        } else {\n            return Touchable.Mixin.touchableHandleResponderGrant.call(this, e);\n        }\n    },\n\n    touchableHandleResponderMove: function (e) {\n        if (this.props.onResponderMove) {\n            return this.props.onResponderMove(e);\n        } else {\n            return Touchable.Mixin.touchableHandleResponderMove.call(this, e);\n        }\n    },\n\n    touchableHandleResponderRelease: function (e) {\n        if (this.props.onResponderRelease) {\n            return this.props.onResponderRelease(e);\n        } else {\n            return Touchable.Mixin.touchableHandleResponderRelease.call(this, e);\n        }\n    },\n\n    touchableHandleResponderTerminate: function (e) {\n        if (this.props.onResponderTerminate) {\n            return this.props.onResponderTerminate(e);\n        } else {\n            return Touchable.Mixin.touchableHandleResponderTerminate.call(this, e);\n        }\n    },\n\n    touchableHandlePress: function(e) {\n        this.props.onPress && this.props.onPress(e);\n    },\n\n    touchableHandleActivePressIn: function(e) {\n        this.props.onPressIn && this.props.onPressIn(e);\n    },\n\n    touchableHandleActivePressOut: function(e) {\n        this.props.onPressOut && this.props.onPressOut(e);\n    },\n\n    touchableHandleLongPress: function(e) {\n        this.props.onLongPress && this.props.onLongPress(e);\n    },\n\n    touchableGetPressRectOffset: function() {\n        return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;\n    },\n\n    touchableGetHitSlop: function() {\n        return this.props.hitSlop;\n    },\n\n    touchableGetHighlightDelayMS: function() {\n        return this.props.delayPressIn || 0;\n    },\n\n    touchableGetLongPressDelayMS: function() {\n        return this.props.delayLongPress === 0 ? 0 :\n        this.props.delayLongPress || 500;\n    },\n\n    touchableGetPressOutDelayMS: function() {\n        return this.props.delayPressOut || 0;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractBrush.js":"import Color from 'color';\nimport patternReg from './patternReg';\n\nexport default function (colorOrBrush) {\n    /*eslint eqeqeq:0*/\n    if (colorOrBrush === 'none' || colorOrBrush == null) {\n        return null;\n    }\n\n    try {\n        let matched = colorOrBrush.match(patternReg);\n        // brush\n        if (matched) {\n            return [1, matched[1]];\n            //todo:\n        } else { // solid color\n            let c = new Color(colorOrBrush).rgbaArray();\n            return [0, c[0] / 255, c[1] / 255, c[2] / 255, c[3]];\n        }\n    } catch (err) {\n        console.warn(`\"${colorOrBrush}\" is not a valid color or brush`);\n        return null;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractClipPath.js":"import clipReg from './patternReg';\n\nconst clipRules = {\n    evenodd: 0,\n    nonzero: 1\n};\n\nexport default function (props) {\n    let {clipPath, clipRule} = props;\n    let clipPathProps = {};\n\n    if (clipPath) {\n        clipPathProps.clipRule = clipRules[clipRule] === 0 ? 0 : 1;\n\n        let matched = clipPath.match(clipReg);\n\n        if (matched) {\n            clipPathProps.clipPath = matched[1];\n        } else {\n            console.warn('Invalid `clipPath` prop, expected a clipPath like `\"#id\"`, but got: \"' + clipPath + '\"');\n        }\n    }\n\n    return clipPathProps;\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractFill.js":"import extractBrush from './extractBrush';\nimport extractOpacity from './extractOpacity';\nimport {fillProps} from '../props';\n\nconst fillRules = {\n    evenodd: 0,\n    nonzero: 1\n};\n\nconst fillKeys = Object.keys(fillProps);\n\nexport default function(props, styleProperties) {\n    fillKeys.forEach((name) => {\n        if (props.hasOwnProperty(name)) {\n            styleProperties.push(name);\n        }\n    });\n\n    return {\n        // default fill is black\n        /*eslint eqeqeq:0*/\n        fill: extractBrush(props.fill == null ? '#000' : props.fill),\n        fillOpacity: extractOpacity(props.fillOpacity),\n        fillRule: fillRules[props.fillRule] === 0 ? 0 : 1\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractGradient.js":"import {Children} from 'react';\nimport _ from 'lodash';\nimport Color from 'color';\n\nimport extractOpacity from './extractOpacity';\nimport extractTransform from './extractTransform';\nimport PATTERN_UNITS from '../PATTERN_UNITS';\nimport percentToFloat from '../percentToFloat';\nimport Stop from '../../elements/Stop';\n\nexport default function(props) {\n    if (!props.id) {\n        return null;\n    }\n\n    const stops = {};\n    Children.forEach(props.children, child => {\n        if (child.type === Stop) {\n            if (child.props.stopColor && child.props.offset) {\n                // convert percent to float.\n                let offset = percentToFloat(child.props.offset);\n\n                // add stop\n                stops[offset] = Color(child.props.stopColor).alpha(extractOpacity(child.props.stopOpacity));\n            }\n        } else {\n            console.warn('`Gradient` elements only accept `Stop` elements as children');\n        }\n    });\n\n    const sorted = _.sortBy(_.map(stops, (stop, offset) => {\n        return {stop, offset};\n    }), 'offset');\n\n    const gradient = [];\n\n    sorted.forEach(({stop}) => {\n        let channels = stop.rgbaArray();\n        gradient.push(channels[0] / 255);\n        gradient.push(channels[1] / 255);\n        gradient.push(channels[2] / 255);\n        gradient.push(channels[3]);\n    });\n\n    gradient.push(...sorted.map(({offset}) => +offset));\n\n\n    let gradientTransform;\n    if (props.transform) {\n        gradientTransform = extractTransform(props.transform);\n    } else {\n        gradientTransform = extractTransform(props);\n    }\n\n    return {\n        gradient,\n        name: props.id,\n        gradientTransform,\n        gradientUnits: PATTERN_UNITS[props.gradientUnits] || 0\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractOpacity.js":"export default function (opacity) {\n    const value = +opacity;\n    return  (typeof value !== 'number' || isNaN(value)) ? 1 : value;\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractPolyPoints.js":"\nexport default function (polyPoints) {\n    return polyPoints.replace(/-/, ' -').split(/(?:\\s+|\\s*,\\s*)/g).join(' ');\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractProps.js":"import extractFill from './extractFill';\nimport extractStroke from './extractStroke';\nimport extractTransform from './extractTransform';\nimport extractClipPath from './extractClipPath';\nimport extractResponder from './extractResponder';\nimport extractOpacity from './extractOpacity';\n\nexport default function(props, ref) {\n    const styleProperties = [];\n\n    const extractedProps = {\n        opacity: extractOpacity(props.opacity),\n        propList: styleProperties\n    };\n\n    if (props.id) {\n        extractedProps.name = props.id;\n    }\n\n    if (props.clipPath) {\n        Object.assign(extractedProps, extractClipPath(props));\n    }\n\n    Object.assign(extractedProps, extractStroke(props, styleProperties));\n    Object.assign(extractedProps, extractFill(props, styleProperties));\n\n    if (props.transform) {\n        extractedProps.matrix = extractTransform(props.transform);\n    } else {\n        extractedProps.matrix = extractTransform(props);\n    }\n\n    Object.assign(extractedProps, extractResponder(props, ref));\n\n    return extractedProps;\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractResponder.js":"import {responderProps, touchableProps} from '../props';\nimport _ from 'lodash';\n\nexport default function (props, ref) {\n    const extractedProps = {};\n\n    _.forEach(responderProps, (v, key) => {\n        const value = props[key];\n        if (props[key]) {\n            if (!extractedProps.responsible && key !== 'pointerEvents') {\n                extractedProps.responsible = true;\n            }\n\n            extractedProps[key] = value;\n        }\n    });\n\n    _.every(touchableProps, (v, key) => {\n        if (!props[key]) {\n            return true;\n        }\n\n        extractedProps.responsible = true;\n        Object.assign(extractedProps, {\n            onStartShouldSetResponder: ref.touchableHandleStartShouldSetResponder,\n            onResponderTerminationRequest: ref.touchableHandleResponderTerminationRequest,\n            onResponderGrant: ref.touchableHandleResponderGrant,\n            onResponderMove: ref.touchableHandleResponderMove,\n            onResponderRelease: ref.touchableHandleResponderRelease,\n            onResponderTerminate: ref.touchableHandleResponderTerminate\n        });\n\n        return false;\n    });\n\n    return extractedProps;\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractStroke.js":"import extractBrush from './extractBrush';\nimport extractOpacity from './extractOpacity';\nimport {strokeProps} from '../props'\n\nconst separator = /\\s*,\\s*/;\n\nconst caps = {\n    butt: 0,\n    square: 2,\n    round: 1\n};\n\nconst joins = {\n    miter: 0,\n    bevel: 2,\n    round: 1\n};\n\nconst strokeKeys = Object.keys(strokeProps);\n\nexport default function(props, styleProperties) {\n    strokeKeys.forEach((name) => {\n        if (props.hasOwnProperty(name)) {\n            styleProperties.push(name);\n        }\n    });\n\n    const {stroke} = props;\n    const strokeWidth = +props.strokeWidth;\n    let strokeDasharray = props.strokeDasharray;\n\n    if (typeof strokeDasharray === 'string') {\n        strokeDasharray = strokeDasharray.split(separator).map(dash => +dash);\n    }\n\n    // strokeDasharray length must be more than 1.\n    if (strokeDasharray && strokeDasharray.length === 1) {\n        strokeDasharray.push(strokeDasharray[0]);\n    }\n\n    return {\n        stroke: extractBrush(stroke),\n        strokeOpacity: extractOpacity(props.strokeOpacity),\n        strokeLinecap: caps[props.strokeLinecap] || 0,\n        strokeLinejoin: joins[props.strokeLinejoin] || 0,\n        strokeDasharray: strokeDasharray || null,\n        strokeWidth: strokeWidth || null,\n        strokeDashoffset: strokeDasharray ? (+props.strokeDashoffset || 0) : null,\n        strokeMiterlimit: props.strokeMiterlimit || 4\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractText.js":"import _ from 'lodash';\nimport React, {Children} from 'react';\nimport TSpan from '../../elements/TSpan';\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?)[ptexm%]*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst spaceReg = /\\s+/;\nconst commaReg = /,/g;\n\nconst anchors = {\n    auto: 0,\n    start: 1,\n    middle: 2,\n    end: 3\n};\n\nlet cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString ? fontFamilyString.split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '') : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    let match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    let fontFamily = extractSingleFontFamily(match[3]);\n    let fontSize = +match[2] || 12;\n    let isBold = /bold/.exec(match[1]);\n    let isItalic = /italic/.exec(match[1]);\n    cachedFontObjectsFromString[font] = {\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: isBold ? 'bold' : 'normal',\n        fontStyle: isItalic ? 'italic' : 'normal'\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nfunction extractFont(props) {\n    let font = props.font;\n    let fontSize = +props.fontSize;\n\n    let ownedFont = {\n        fontFamily: extractSingleFontFamily(props.fontFamily),\n        fontSize: isNaN(fontSize) ? null : fontSize,\n        fontWeight: props.fontWeight,\n        fontStyle: props.fontStyle\n    };\n\n    if (typeof props.font === 'string') {\n        font = parseFontString(props.font);\n    }\n    ownedFont = _.pickBy(ownedFont, prop => !_.isNil(prop));\n\n    return _.defaults(ownedFont, font);\n}\n\nfunction parseDelta(delta) {\n    if (typeof delta === 'string') {\n        if (isNaN(+delta)) {\n            return delta.trim().replace(commaReg, ' ').split(spaceReg).map(d => +d || 0);\n        } else {\n            return [+delta];\n        }\n    } else if (typeof delta === 'number') {\n        return [delta];\n    } else {\n        return [];\n    }\n}\n\nexport default function(props, container) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        textAnchor,\n        startOffset\n    } = props;\n\n\n    const deltaX = parseDelta(dx);\n    const deltaY = parseDelta(dy);\n    let { children } = props;\n    let content = null;\n\n\n    if (typeof children === 'string' || typeof children === 'number') {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === 'string' || typeof child === 'number') {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        textAnchor: anchors[textAnchor] || 0,\n        font: extractFont(props),\n        children,\n        content,\n        deltaX,\n        deltaY,\n        startOffset: (startOffset || 0).toString(),\n        positionX: _.isNil(x) ? null : x.toString(),\n        positionY: _.isNil(y) ? null : y.toString()\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractTransform.js":"import Matrix2D from '../Matrix2D';\nimport _ from 'lodash';\nlet pooledMatrix = new Matrix2D();\n\nfunction transformToMatrix(props, transform) {\n    pooledMatrix.reset();\n    appendTransform(props);\n\n    if (transform) {\n        appendTransform(transform);\n    }\n\n    return pooledMatrix.toArray();\n}\n\nfunction appendTransform(transform) {\n    pooledMatrix\n        .appendTransform(\n            transform.x + transform.originX,\n            transform.y + transform.originY,\n            transform.scaleX, transform.scaleY,\n            transform.rotation,\n            transform.skewX,\n            transform.skewY,\n            transform.originX,\n            transform.originY\n        );\n}\n\nfunction universal2axis(universal, axisX, axisY, defaultValue) {\n    let coords = [];\n    let x;\n    let y;\n    if (_.isString(universal)) {\n        coords = universal.split(/\\s*,\\s*/);\n        if (coords.length === 2) {\n            x = +coords[0];\n            y = +coords[1];\n        } else if　(coords.length === 1)　{\n            x = y = +coords[0];\n        }\n    } else if (_.isNumber(universal)) {\n        x = y = universal;\n    }\n\n    axisX = +axisX;\n    if (!isNaN(axisX)) {\n        x = axisX;\n    }\n\n    axisY = +axisY;\n    if (!isNaN(axisY)) {\n        y = axisY;\n    }\n\n    return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nfunction props2transform(props) {\n    let [originX, originY] = universal2axis(props.origin, props.originX, props.originY);\n    let [scaleX, scaleY] = universal2axis(props.scale, props.scaleX, props.scaleY, 1);\n    let [skewX, skewY] = universal2axis(props.skew, props.skewX, props.skewY);\n    let [translateX, translateY] = universal2axis(\n        props.translate,\n        _.isNil(props.translateX) ? props.x : props.translateX,\n        _.isNil(props.translateY) ? props.y : props.translateY\n    );\n\n    return {\n        rotation: +props.rotation || +props.rotate || 0,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        originX: originX,\n        originY: originY,\n        skewX: skewX,\n        skewY: skewY,\n        x: translateX,\n        y: translateY\n    };\n}\n\nexport default function (props) {\n    return transformToMatrix(props2transform(props), props.transform ? props2transform(props.transform) : null);\n}\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/extractViewBox.js":"\nimport React, {Component, PropTypes} from 'react';\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/src/renderers/native/createReactNativeComponentClass';\nimport {ViewBoxAttributes} from '../attributes';\n\nconst meetOrSliceTypes = {\n    meet: 0,\n    slice: 1,\n    none: 2\n};\n\nconst alignEnum = [\n    'xMinYMin', 'xMidYMin', 'xMaxYMin',\n    'xMinYMid', 'xMidYMid', 'xMaxYMid',\n    'xMinYMax', 'xMidYMax', 'xMaxYMax',\n    'none'\n].reduce((prev, name) => {\n    prev[name] = name;\n    return prev;\n}, {});\n\nconst spacesRegExp = /\\s+/;\n\nexport default function (props) {\n    const {viewBox, preserveAspectRatio} = props;\n\n    if (!viewBox) {\n        return null;\n    }\n\n    let params = viewBox.trim().split(spacesRegExp);\n\n    if (params.length === 4 &&  params.every(param => !isNaN(+params))) {\n        console.warn('Invalid `viewBox` prop:' + viewBox);\n        return null;\n    }\n\n    let modes = preserveAspectRatio ? preserveAspectRatio.trim().split(spacesRegExp) : [];\n\n    let meetOrSlice = meetOrSliceTypes[modes[1]] || 0;\n    let align = alignEnum[modes[0]] || 'xMidYMid';\n\n    return {\n        minX: +params[0],\n        minY: +params[1],\n        vbWidth: +params[2],\n        vbHeight: +params[3],\n        align,\n        meetOrSlice\n    }\n}\n\nexport {\n    meetOrSliceTypes,\n    alignEnum\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-svg/node_modules/react-native-svg/lib/extract/patternReg.js":"export default /^url\\(#(.+?)\\)$/;\n"}